// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Resource model for dynamic permission management
model Resource {
  id          String       @id @default(cuid())
  name        String       // e.g., "PRODUCT", "CUSTOMER"
  slug        String       @unique // e.g., "product", "customer"
  description String?
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([slug])
}

// Action model for dynamic permission actions
model Action {
  id          String       @id @default(cuid())
  name        String       // e.g., "VIEW", "CREATE", "APPROVE"
  slug        String       @unique // e.g., "view", "create", "approve"
  description String?
  permissions PermissionAction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([slug])
}

/*
  Permission model (polymorphic) for granular access control.
  Each permission record contains a "target" field that indicates which target it belongs to:
    - For USER: only userId is filled,
    - For ROLE: only roleId is filled,
    - For ORGANIZATION: only organizationId should be filled.
*/
model Permission {
  id             String           @id @default(cuid())
  
  // Resource being permitted
  resource       Resource         @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId     String

  // Field that determines which target (USER, ROLE, ORGANIZATION) the permission record belongs to
  target         PermissionTarget

  // Optional relationships for the respective target
  user           User?            @relation("UserPermissions", fields: [userId], references: [id], onDelete: Cascade)
  userId         String?

  role           Role?            @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  roleId         String?

  organization   Organization?    @relation("OrganizationPermissions", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  // Actions associated with the permission (e.g.: view, create, update)
  actions        PermissionAction[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
  @@index([roleId])
  @@index([organizationId])
}

/*
  Many-to-Many relationship table:
  Associates actions with a permission record.
*/
model PermissionAction {
  id            String       @id @default(cuid())
  permission    Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId  String
  action        Action       @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([permissionId, actionId])
  @@index([permissionId])
  @@index([actionId])
}

// Role model for organization-level roles
model Role {
  id             String       @id @default(cuid())
  name           String       @unique      
  description    String?
  isDefault      Boolean      @default(false)
  permissions    Permission[] @relation("RolePermissions")
  members        OrganizationMember[]
  userRoles      UserRole[]    
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?    
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

// User model
model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  firstName          String?
  lastName           String?
  phone              String?
  avatar             String?
  status             UserStatus @default(ACTIVE)
  emailVerified      Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relationships
  userRoles          UserRole[]      
  memberships        OrganizationMember[]
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  permissions        Permission[]   @relation("UserPermissions")
  securityLogs       SecurityLog[]
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])  
  @@index([userId])
  @@index([roleId])
}

// Organization model
model Organization {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  status        OrgStatus @default(ACTIVE)
  ownerId       String
  parentId      String?   // Parent organization ID
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  members       OrganizationMember[]
  roles         Role[]
  permissions   Permission[] @relation("OrganizationPermissions")
  owner         User      @relation("OrganizationOwner", fields: [ownerId], references: [id])
  parent        Organization?  @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children      Organization[] @relation("OrganizationHierarchy")

  @@index([ownerId])
  @@index([parentId])
}

// OrganizationMember model for linking users to organizations with roles
model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  roleId         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
  @@index([roleId])
}

// Security log model for tracking authentication attempts
model SecurityLog {
  id          String    @id @default(cuid())
  userId      String?   // Optional because failed attempts might not have a user
  email       String    // The email used in the attempt
  ipAddress   String    // IP address of the request
  userAgent   String    // Browser/client info
  status      String    // SUCCESS, FAILED
  type        String    // LOGIN, LOGOUT, PASSWORD_RESET, etc.
  message     String    // Additional details about the event
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([status])
}

// Enums

enum RoleType {
  ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Discriminator enum for Permission.target field
enum PermissionTarget {
  USER
  ROLE
  ORGANIZATION
}
